============================= Install IBM Cloud Kubernetes Service command-line utilities =============================

Install the IBM Cloud command-line interface (CLI).
jmendoza@jmendoza-ThinkPad-T420:~$ curl -sL https://ibm.biz/idt-installer | bash

Log in to the IBM Cloud CLI. If you have a federated account, include the --sso flag:
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud login --sso

If you have an an API key, use this command: ibmcloud login --apikey <your_apikey>

Install the IBM Cloud Kubernetes Service plug-in:
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud plugin install container-service

Verify that the plug-in is installed properly:
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud plugin list
Listando los plugins instalador...

Nombre de plugin                       Versión   Estado
cloud-functions/wsk/functions/fn       1.0.39
cloud-object-storage                   1.1.3
container-registry                     0.1.464
container-service/kubernetes-service   1.0.57

jmendoza@jmendoza-ThinkPad-T420:~$

============================= Set up your environment =============================

Set the context for your cluster in your CLI
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks clusters
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks cluster config --cluster k8s-cluster-jm

Get basic information about your cluster and its worker nodes
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks clusters
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks cluster get --cluster k8s-cluster-jm
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks workers --cluster k8s-cluster-jm
jmendoza@jmendoza-ThinkPad-T420:~$ ibmcloud ks worker get --cluster k8s-cluster-jm --worker kube-br0v494d0v235orml2pg-k8sclusterj-default-00000031

============================= Install Istio on IBM Cloud Kubernetes Service =============================

1- Either download Istio from https://github.com/istio/istio/releases or get the latest version by using curl:
jmendoza@jmendoza-ThinkPad-T420:~$ curl -L https://git.io/getLatestIstio | sh -

2- Add the istioctl client to your PATH variable. The <version-number> is in the directory name.
jmendoza@jmendoza-ThinkPad-T420:~$ export PATH=$PWD/istio-1.5.4/bin:$PATH

3- Begin the Istio pre-installation verification check by running:
jmendoza@jmendoza-ThinkPad-T420:~$ istioctl verify-install

4- Change the directory to the Istio file location.
jmendoza@jmendoza-ThinkPad-T420:~$ cd istio-1.5.4/

5- Install Istio into the istio-system namespace in your Kubernetes cluster:
jmendoza@jmendoza-ThinkPad-T420:~/istio-1.5.4$ kubectl apply -f $PWD/install/kubernetes/istio-demo.yaml

6- Ensure that the istio-* Kubernetes services are deployed before you continue:
jmendoza@jmendoza-ThinkPad-T420:~$ kubectl get svc -n istio-system

7- Ensure the corresponding pods istio-citadel-*, istio-ingressgateway-*, istio-pilot-*, and istio-policy-* are all in the Running state before you continue.
jmendoza@jmendoza-ThinkPad-T420:~$ kubectl get pods -n istio-system

Before your continue, make sure all the pods are deployed and running. If they're in pending state, wait a few minutes to let the deployment finish.

Congratulations! You successfully installed Istio into your cluster.

=============================  Download the Guestbook app and create the Redis database =============================

1- Create the Redis controllers and services for both the master and the slave:
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl create -f redis-master-deployment.yaml
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl create -f redis-master-service.yaml
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl create -f redis-slave-deployment.yaml
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl create -f redis-slave-service.yaml

2- Verify that deployment and service are created:
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl get deployment
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl get svc
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl get pods

============================= Install the Guestbook app with manual sidecar injection =============================

In Kubernetes, a sidecar is a utility container in the pod, and its purpose is to support the main container.

For Istio to work, Envoy proxies must be deployed as sidecars to each pod of the deployment. You can inject the Istio sidecar into a pod in two ways:

- Manually by using the istioctl CLI tool
- Automatically by using the Istio Initializer

In this section, you will use the manual injection. Manual injection modifies the controller configuration, for example, deployment. It does this by modifying the pod template spec such that all pods for that deployment are created with the injected sidecar.

1- Inject the Istio Envoy sidecar into the guestbook pods and deploy the Guestbook app on to the Kubernetes cluster:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl apply -f <(istioctl kube-inject -f guestbook-deployment.yaml)
deployment.apps/guestbook-v2 created

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl apply -f <(istioctl kube-inject -f../v1/guestbook-deployment.yaml)
deployment.apps/guestbook-v1 created

There are two versions of deployments: a new version (v2) in the current directory and a previous version (v1) in a sibling directory. They will be used in future labs to showcase the Istio traffic routing capabilities.

2- Verify that the service and was created, that the pods are running:
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl get all

============================= Add the Watson Tone Analyzer =============================

1- Set RESOURCE_GROUP

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud resource service-instance-create my-tone-analyzer-service tone-analyzer lite us-south
ERROR
No se ha establecido ningún grupo de recursos como destino. Utilice 'ibmcloud target -g RESOURCE_GROUP' para establecer un grupo de recursos como destino.

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud$ ibmcloud ks cluster get --cluster k8s-cluster-jm
Recuperando el clúster k8s-cluster-jm...
OK

Nombre:                                   k8s-cluster-jm
ID:                                       br0v494d0v235orml2pg
Estado:                                   normal
Creado:                                   2020-05-18T02:25:40+0000
Ubicación:                                hou02
URL maestro:                              https://c5.dal12.containers.cloud.ibm.com:30482
URL de punto final de servicio público:   https://c5.dal12.containers.cloud.ibm.com:30482
URL de punto final de servicio privado:   -
Ubicación maestra:                        Dallas
Estado del maestro:                       Ready (15 minutes ago)
Estado de maestro:                        deployed
Estado maestro:                           normal
Subdominio de ingreso:                    - †
Secreto de ingreso:                       - †
Trabajadores:                             1
Zonas de trabajador:                      hou02
Versión:                                  1.16.9_1529
Creador:                                  -
Panel de control de supervisión:          -
ID de grupo de recursos:                  0ab2824924544da284dcb28335d9e7e6
Nombre de grupo de recursos:              default
† Es posible que el secreto y el subdominio de ingreso aún no estén listos. Para obtener más información sobre el tipo de clúster, consulte 'https://ibm.biz/ingress-sub' para Kubernetes o 'https://ibm.biz/ingress-sub-ocp' para OpenShift.


jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud target -g 0ab2824924544da284dcb28335d9e7e6
Grupo de recursos de destino default



Punto final de API:         https://cloud.ibm.com
Región:                     us-south
Usuario:                    xxxxx
Cuenta:                     xxxxx
Grupo de recursos:          default
Punto final de API de CF:
Organización:
Espacio:
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$

2- Create the Watson Tone Analyzer in your account:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud resource service-instance-create jm-tone-analyzer-service tone-analyzer lite us-south
Creando instancia de servicio jm-tone-analyzer-service en el grupo de recursos default de la cuenta xxxxxxx Account como xxxxx..
Correcto
La instancia de servicio jm-tone-analyzer-service se ha creado.

Nombre:              jm-tone-analyzer-service
ID:                  crn:v1:bluemix:public:tone-analyzer:us-south:a/61930f79ebdb3d91e5030d0cb0313494:8f0298b8-c338-42bb-986c-272bc8e9b3e5::
GUID:                8f0298b8-c338-42bb-986c-272bc8e9b3e5
Ubicación:           us-south
Estado:              active
Tipo:                service_instance
Subtipo:
Permitir limpieza:   false
Locked:              false
Creado el:           2020-05-18T04:39:12Z
Actualizado a las:   2020-05-18T04:39:12Z
Última operación:
                     Estado    create succeeded
                     Mensaje   Completed create instance operation

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$

3- Create the service key for the Tone Analyzer service. This command should output the credentials that you just created. You will need the value for the API key and URL later.

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud resource service-key-create tone-analyzer-key Manager --instance-name jm-tone-analyzer-service
Creando clave de servicio de instancia de servicio jm-tone-analyzer-service bajo la cuenta xxxxxxx Account como xxxxx...
Correcto
La clave de servicio crn:v1:bluemix:public:tone-analyzer:us-south:a/61930f79ebdb3d91e5030d0cb0313494:8f0298b8-c338-42bb-986c-272bc8e9b3e5:resource-key:aac9b1d6-4534-4e95-ad32-1dbf17e407ef se ha creado.

Nombre:         tone-analyzer-key
ID:             crn:v1:bluemix:public:tone-analyzer:us-south:a/61930f79ebdb3d91e5030d0cb0313494:8f0298b8-c338-42bb-986c-272bc8e9b3e5:resource-key:aac9b1d6-4534-4e95-ad32-1dbf17e407ef
Creado el:      Mon May 18 04:43:52 UTC 2020
Estado:         active
Credenciales:
                apikey:                   YOUR_API_KEY
                iam_apikey_description:   Auto-generated for key aac9b1d6-4534-4e95-ad32-1dbf17e407ef
                iam_apikey_name:          tone-analyzer-key
                iam_role_crn:             crn:v1:bluemix:public:iam::::serviceRole:Manager
                iam_serviceid_crn:        crn:v1:bluemix:public:iam-identity::a/61930f79ebdb3d91e5030d0cb0313494::serviceid:ServiceId-658a31f4-1db6-4c8f-9483-bf82fe2b101b
                url:                      YOUR_URL

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$

Tip: If you need to get the service keys later, run this command:

ibmcloud resource service-key tone-analyzer-key

4- Open the analyzer-deployment.yaml (Istio-K8S-Cloud/guestbook/v2) and find the env section near the end of the file.
Replace YOUR_API_KEY with your own API key and replace YOUR_URL with the URL value that you saved before. YOUR_URL should look something like this: gateway.watsonplatform.net/tone-analyzer/api. Save the file.

5- Apply the egress rules found in the istio101/workshop/plans directory:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl apply -f analyzer-egress.yaml
serviceentry.networking.istio.io/iam-watson created

6- Deploy the analyzer pods and service by using the analyzer-deployment.yaml and analyzer-service.yaml files found in the guestbook/v2 directory. The analyzer service talks to Watson Tone Analyzer to help analyze the tone of a message.

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ ls
analyzer                  analyzer-service.yaml  guestbook-deployment.yaml  README.md                     redis-master-service.yaml    redis-slave-service.yaml
analyzer-deployment.yaml  guestbook              guestbook-service.yaml     redis-master-deployment.yaml  redis-slave-deployment.yaml

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl apply -f <(istioctl kube-inject -f analyzer-deployment.yaml)
deployment.apps/analyzer created

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/guestbook/v2$ kubectl apply -f analyzer-service.yaml
service/analyzer created

============================= Configure Istio to receive telemetry data =============================

1- Verify that the Grafana, Prometheus, ServiceGraph, and Jaeger add-ons were installed successfully. All add-ons are installed into the istio-system namespace:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud$ kubectl get pods -n istio-system
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud$ kubectl get services -n istio-system

2- Go back to the plans directory at istio101/workshop/plans:

3- Create a rule to collect telemetry data

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl create -f guestbook-telemetry.yaml
instance.config.istio.io/doublerequestcount created
handler.config.istio.io/doublehandler created
rule.config.istio.io/doubleprom created
instance.config.istio.io/newlog created
handler.config.istio.io/newhandler created
rule.config.istio.io/newlogstdio created

4- Obtain the guestbook endpoint to access the guestbook from either a paid cluster or a lite cluster.
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl get svc guestbook -n default
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud ks workers --cluster k8s-cluster-jm

5- Generate a small load to the app
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ while sleep 0.5; do curl http://184.172.214.156:32243/; done

============================= View guestbook telemetry data =============================

Jaeger

Establish port forwarding from local port 16686 to the Tracing instance:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl port-forward -n istio-system \>   $(kubectl get pod -n istio-system -l app=jaeger -o jsonpath='{.items[0].metadata.name}') \
>   16686:16686 &
[1] 15252
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ Forwarding from 127.0.0.1:16686 -> 16686
Forwarding from [::1]:16686 -> 16686
Handling connection for 16686
Handling connection for 16686
Handling connection for 16686

In your browser, go to http://127.0.0.1:16686

Grafana

Establish port forwarding from local port 3000 to the Grafana instance:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl -n istio-system port-forward \>   $(kubectl -n istio-system get pod -l app=grafana -o jsonpath='{.items[0].metadata.name}') \
>   3000:3000 &
[2] 15670
jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ Forwarding from 127.0.0.1:3000 -> 3000
Forwarding from [::1]:3000 -> 3000
Handling connection for 3000
Handling connection for 3000
Handling connection for 3000
Handling connection for 3000
Handling connection for 3000
Handling connection for 3000

Browse to http://localhost:3000 and navigate to the Istio Mesh Dashboard by clicking the Home menu on the top left.

============================= Expose the Guestbook app with Ingress if you have lite cluster =============================

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl create -f guestbook-gateway.yaml
gateway.networking.istio.io/guestbook-gateway created
virtualservice.networking.istio.io/virtual-service-guestbook created

Check the node port of the ingress:

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl create -f guestbook-gateway.yaml
gateway.networking.istio.io/guestbook-gateway created
virtualservice.networking.istio.io/virtual-service-guestbook created

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ kubectl get svc istio-ingressgateway -n istio-system
NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                                                                      AGE
istio-ingressgateway   LoadBalancer   172.21.208.194   <pending>     15020:31842/TCP,80:31380/TCP,443:31390/TCP,31400:31400/TCP,15029:30732/TCP,15030:31534/TCP,15031:31671/TCP,15032:30542/TCP,15443:31325/TCP   20h

jmendoza@jmendoza-ThinkPad-T420:~/IdeaProjects/JonathanM2ndoza/Istio-K8S-Cloud/istio101/workshop/plans$ ibmcloud ks workers --cluster k8s-cluster-jm
OK
ID                                                       IP pública        IP privada     Tipo   Estado   Estado   Zona    Versión
kube-br0v494d0v235orml2pg-k8sclusterj-default-00000031   184.172.214.156   10.76.193.44   free   normal   Ready    hou02   1.16.9_1531

Get the Public IP of your cluster:

export INGRESS_IP=184.172.214.156:31380




